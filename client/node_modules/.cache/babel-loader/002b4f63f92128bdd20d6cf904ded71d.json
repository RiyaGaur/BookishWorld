{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\Downloads\\\\project_mern_memories-PART_3\\\\project_mern_memories-PART_3\\\\client\\\\src\\\\components\\\\Form\\\\Form.js\";\nimport React, { useState, useEffect } from 'react';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FileBase from 'react-file-base64';\nimport { createPost, updatePost } from '../../actions/posts';\nimport useStyles from './styles';\n\nconst Form = ({\n  currentId,\n  setCurrentId\n}) => {\n  var _user$result3;\n\n  const [postData, setPostData] = useState({\n    title: '',\n    creator: '',\n    message: '',\n    tags: '',\n    selectedFile: ''\n  });\n  const post = useSelector(state => currentId ? state.posts.find(message => message._id === currentId) : null);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      title: '',\n      creator: '',\n      message: '',\n      tags: '',\n      selectedFile: ''\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      var _user$result;\n\n      dispatch(createPost({ ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }));\n      clear();\n    } else {\n      var _user$result2;\n\n      dispatch(updatePost(currentId, { ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n      }));\n      clear();\n    }\n  };\n\n  if (!(user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.name)) {\n    return /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, \"Please Sign In to add your own favourite Book and like other's favourite book.\"));\n  }\n\n  return (\n    /*#__PURE__*/\n    // <Paper className={classes.paper}>\n    //   <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\n    //     <Typography variant=\"h6\">{currentId ? `Editing \"${post.title}\"` : 'Creating a Memory'}</Typography>\n    //     <TextField name=\"title\" variant=\"outlined\" label=\"Title\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })} />\n    //     <TextField name=\"message\" variant=\"outlined\" label=\"Message\" fullWidth multiline rows={4} value={postData.message} onChange={(e) => setPostData({ ...postData, message: e.target.value })} />\n    //     <TextField name=\"tags\" variant=\"outlined\" label=\"Tags (coma separated)\" fullWidth value={postData.tags} onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })} />\n    //     <div className={classes.fileInput}><FileBase type=\"file\" multiple={false} onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })} /></div>\n    //     <Button className={classes.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\n    //     <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Clear</Button>\n    //   </form>\n    // </Paper>\n    React.createElement(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 10\n      }\n    }, currentId ? `Editing ${postData.title}` : 'Adding Book'), /*#__PURE__*/React.createElement(TextField, {\n      name: \"title\",\n      variant: \"outlined\",\n      label: \"Title\",\n      fullWidth: true,\n      value: postData.title,\n      onChange: e => setPostData({ ...postData,\n        title: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      name: \"creator\",\n      variant: \"outlined\",\n      label: \"Creator\",\n      fullWidth: true,\n      value: postData.creator,\n      onChange: e => setPostData({ ...postData,\n        creator: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      name: \"message\",\n      variant: \"outlined\",\n      label: \"Description\",\n      fullWidth: true,\n      multiline: true,\n      rows: 3,\n      value: postData.message,\n      onChange: e => setPostData({ ...postData,\n        message: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      name: \"tags\",\n      variant: \"outlined\",\n      label: \"Tags (coma separated)\",\n      fullWidth: true,\n      value: postData.tags,\n      onChange: e => setPostData({ ...postData,\n        tags: e.target.value.split(',')\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.fileInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(FileBase, {\n      type: \"file\",\n      multiple: false,\n      onDone: ({\n        base64\n      }) => setPostData({ ...postData,\n        selectedFile: base64\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: classes.buttonSubmit,\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"medium\",\n      type: \"submit\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 10\n      }\n    }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n      className: classes.buttonClear,\n      variant: \"contained\",\n      color: \"secondary\",\n      size: \"medium\",\n      onClick: clear,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 10\n      }\n    }, \"Clear\")))\n  );\n};\n\nexport default Form;","map":{"version":3,"sources":["C:/Users/Hp/Downloads/project_mern_memories-PART_3/project_mern_memories-PART_3/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","TextField","Button","Typography","Paper","useDispatch","useSelector","FileBase","createPost","updatePost","useStyles","Form","currentId","setCurrentId","postData","setPostData","title","creator","message","tags","selectedFile","post","state","posts","find","_id","dispatch","classes","user","JSON","parse","localStorage","getItem","clear","handleSubmit","e","preventDefault","name","result","paper","root","form","target","value","split","fileInput","base64","buttonSubmit","buttonClear"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FileBase from 'react-file-base64';\n\nimport { createPost, updatePost } from '../../actions/posts';\nimport useStyles from './styles';\n\nconst Form = ({ currentId, setCurrentId }) => {\n  const [postData, setPostData] = useState({ title: '',creator: '' , message: '', tags: '', selectedFile: '' });\n  const post = useSelector((state) => (currentId ? state.posts.find((message) => message._id === currentId) : null));\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const user = JSON.parse(localStorage.getItem('profile'));\n\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({ title: '', creator: '' ,message: '', tags: '', selectedFile: '' });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      dispatch(createPost({ ...postData, name: user?.result?.name }));\n      clear();\n    } else {\n      dispatch(updatePost(currentId, { ...postData, name: user?.result?.name }));\n      clear();\n    }\n  };\n\n  if (!user?.result?.name) {\n    return (\n      <Paper className={classes.paper}>\n        <Typography variant=\"h6\" align=\"center\">\n          Please Sign In to add your own favourite Book and like other's favourite book.\n        </Typography>\n      </Paper>\n    );\n  }\n\n  return (\n    // <Paper className={classes.paper}>\n    //   <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\n    //     <Typography variant=\"h6\">{currentId ? `Editing \"${post.title}\"` : 'Creating a Memory'}</Typography>\n    //     <TextField name=\"title\" variant=\"outlined\" label=\"Title\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })} />\n    //     <TextField name=\"message\" variant=\"outlined\" label=\"Message\" fullWidth multiline rows={4} value={postData.message} onChange={(e) => setPostData({ ...postData, message: e.target.value })} />\n    //     <TextField name=\"tags\" variant=\"outlined\" label=\"Tags (coma separated)\" fullWidth value={postData.tags} onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })} />\n    //     <div className={classes.fileInput}><FileBase type=\"file\" multiple={false} onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })} /></div>\n    //     <Button className={classes.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\n    //     <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Clear</Button>\n    //   </form>\n    // </Paper>\n    <Paper className={classes.paper}>\n       <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\n         <Typography variant=\"h4\">{currentId ? `Editing ${postData.title}` : 'Adding Book'}</Typography>\n         {/* <TextField style={{backgroundColor: \"black\"}} InputProps={{style: {color: \"white\"}, classes: {notchedOutline: classes.notchedOutline}}} InputLabelProps={{style:{color: \"white\"}}} name=\"title\" variant=\"outlined\" label=\"Title\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })} /> */}\n         <TextField name=\"title\" variant=\"outlined\" label=\"Title\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })} />\n         <TextField name=\"creator\" variant=\"outlined\" label=\"Creator\" fullWidth value={postData.creator} onChange={(e) => setPostData({ ...postData, creator: e.target.value })} />\n         <TextField name=\"message\" variant=\"outlined\" label=\"Description\" fullWidth multiline rows={3} value={postData.message} onChange={(e) => setPostData({ ...postData, message: e.target.value })} />\n         <TextField name=\"tags\" variant=\"outlined\" label=\"Tags (coma separated)\" fullWidth value={postData.tags} onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })} />\n         {/* <div style={{color: \"white\"}} className={classes.fileInput}><FileBase type=\"file\" multiple={false} onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })} /></div> */}\n         <div className={classes.fileInput}><FileBase type=\"file\" multiple={false} onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })} /></div>\n         <Button className={classes.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"medium\" type=\"submit\" fullWidth>Submit</Button>\n         <Button className={classes.buttonClear} variant=\"contained\" color=\"secondary\" size=\"medium\" onClick={clear} fullWidth>Clear</Button>\n       </form>\n     </Paper>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}